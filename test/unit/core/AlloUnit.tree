AlloUnit::initialize
└── given upgrade version is correct
    ├── it should call _initializeOwner
    ├── it should call _updateRegistry
    ├── it should call _updateTreasury
    ├── it should call _updatePercentFee
    ├── it should call _updateBaseFee
    └── it should call _updateTrustedForwarder

AlloUnit::createPoolWithCustomStrategy
├── when strategy is zero address
│   └── it should revert
└── when calling with proper params
    ├── it should call _createPool
    └── it should return poolId

AlloUnit::createPool
├── when strategy is zero address
│   └── it should revert
└── when calling with proper params
    ├── it should call _createPool
    ├── it should increment the _nonces of the creator
    └── it should return poolId

AlloUnit::updatePoolMetadata
└── given sender is manager of pool
    ├── it should call _checkOnlyPoolManager
    ├── it should update metadata
    └── it should emit event

AlloUnit::updateRegistry
├── when sender is not owner
│   └── it should revert
└── when sender is owner
    ├── when new registry is zero address
    │   └── it should revert
    └── when new registry is not zero address
        ├── it should update registry
        └── it should emit event

AlloUnit::updateTreasury
├── when sender is not owner
│   └── it should revert
└── when sender is owner
    ├── when new treasury is zero address
    │   └── it should revert
    └── given new treasury is not zero address
        ├── it should update treasury
        └── it should emit event

AlloUnit::updatePercentFee
├── when sender is not owner
│   └── it should revert
└── when sender is owner
    ├── when percentFee is more than 1e18
    │   └── it should revert
    └── when percentFee is less than 1e18
        ├── it should update percentFee
        └── it should emit event

AlloUnit::updateBaseFee
├── when sender is not owner
│   └── it should revert
└── when sender is owner
    ├── it should update baseFee
    └── it should emit event

AlloUnit::updateTrustedForwarder
├── when sender is not owner
│   └── it should revert
└── when sender is owner
    ├── it should update trustedForwarder
    └── it should emit event

AlloUnit::addPoolManagers
├── when sender is not admin of poolId
│   └── it should revert
└── when sender is admin of poolId
    ├── when manager is zero address
    │   └── it should revert
    └── when manager is not zero address
        └── it should call _grantRole for manager

AlloUnit::removePoolManagers
├── when sender is not admin of poolId
│   └── it should revert
└── when sender is admin of poolId
    └── it should call _revokeRole for manager

AlloUnit::addPoolManagersInMultiplePools
├── when sender is not admin of all poolIds
│   └── it should revert
└── when sender is admin of of all poolIds
    └── it should call addPoolManagers

AlloUnit::removePoolManagersInMultiplePools
├── when sender is not admin of all poolIds
│   └── it should revert
└── when sender is admin of of all poolIds
    └── it should call removePoolManagers

AlloUnit::recoverFunds
├── when sender is not owner
│   └── it should revert
└── when sender is owner
    ├── when token is native
    │   └── it should transfer the whole balance of native token
    └── when token is not native
        └── it should transfer the whole balance of token

AlloUnit::registerRecipient
├── it should transfer the msg.value received
└── it should call register on the strategy

AlloUnit::batchRegisterRecipient
├── when poolId length does not match _data length
│   └── it should revert
├── when poolId length does not match _recipients length
│   └── it should revert
└── when poolId length matches _data length and _recipients length
    ├── it should call register on the strategy
    └── it should return recipientIds

AlloUnit::fundPool
├── when amount is zero
│   └── it should revert
├── when token is native and value does not match amount
│   └── it should revert
└── when called with proper params
    └── it should call _fundPool

AlloUnit::allocate
└── it should call allocate on the strategy

AlloUnit::batchAllocate
├── when poolId length does not match _data length
│   └── it should revert
├── when poolId length does not match _values length
│   └── it should revert
├── when poolId length does not match _recipients length
│   └── it should revert
├── when poolId length does not match _amounts length
│   └── it should revert
├── when lengths matches
│   └── it should call allocate
└── when totalValue does not match msg value
    └── it should revert

AlloUnit::distribute
└── it should call distribute on the strategy

AlloUnit::changeAdmin
├── when sender is not admin of poolId
│   └── it should revert
└── when sender is admin of poolId
    ├── when new admin is zero address
    │   └── it should revert
    └── when new admin is not zero address
        ├── it should call _checkOnlyPoolAdmin
        ├── it should call _revokeRole
        └── it should call _grantRole

AlloUnit::_checkOnlyPoolManager
├── when is not pool manager
│   └── it should revert
└── when is pool manager
    └── it should not revert


AlloUnit::_checkOnlyPoolAdmin
├── when is not pool admin
│   └── it should revert
└── when is pool admin
    └── it should not revert

AlloUnit::_createPool
├──when called valid params
│   ├── it should grant admin role to creator
│   ├── it should set admin role to pool manager
│   ├── it should save pool on pools mapping
│   ├── it should call initialize on the strategy
│   ├── it should add pool managers
│   └── it should emit PoolCreated event
├── when is not owner or member of profile
│   └── it should revert
├── when strategy poolId does not match
│   └── it should revert
├── when allo address does not match
│    └── it should revert
├── when baseFee is more than zero
│   ├── when token is native
│   │   └── when baseFee plus amount is diff from value
│   │       └── it should revert
│   ├── when token is not native
│   │   └── when baseFee is diff from value
│   │       └── it should revert
│   └── when provided fee is correct
│       ├── it should call _transferAmount
│       └── it should emit event
└── when amount is more than zero
    └── it should call _fundPool

AlloUnit::_fundPool
├── when fee amount is more than zero
│   ├── it should call getBalance on the treasury
│   ├── it should transfer the fee to the treasury
│   ├── it should transfer the remaining amount to the pool
│   └── it should increase the pool amount
└── when fee amount is zero
    ├── it should transfer the amount to the pool
    ├── it should increase the pool amount
    └── it should emit event

AlloUnit::_isPoolAdmin
├── when has role admin
│   └── it should return true
└── when has no role admin
    └── it should return false

AlloUnit::_isPoolManager
├── when has role manager
│   └── it should return true
├── when has role admin
│   └── it should return true
└── when has no roles at all
    └── it should return false

AlloUnit::getFeeDenominator
└── it should return feeDenominator

AlloUnit::isPoolAdmin
├── it should call _isPoolAdmin
└── it should return isPoolAdmin

AlloUnit::isPoolManager
├── it should call _isPoolManager
└── it should return isPoolManager

AlloUnit::getStrategy
└── it should return strategy

AlloUnit::getPercentFee
└── it should return percentFee

AlloUnit::getBaseFee
└── it should return baseFee

AlloUnit::getTreasury
└── it should return treasury

AlloUnit::getRegistry
└── it should return registry

AlloUnit::getPool
└── it should return pool

AlloUnit::isTrustedForwarder
├── when forwarder is trustedForwarder
│   └── it should return true
└── when forwarder is not trustedForwarder
    └── it should return false